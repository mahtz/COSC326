/**
 * Stores all 63 pentominoes as 2D arrays, where asterisks are a tile filled by the pentomino,
 * and dots are empty tiles.
 */
public class Pentomino {

  /** Stores an array of all the possible pentominoes of a type. */
  char[][][] pent;

  /** The type of each pentomino. */
  char type;
  int check;

  /**
   * Given the type of the pentinomo wanted, pent will be set to store all pentominoes of 
   * that type.
   */
  public Pentomino(char letter) {

    switch (letter){
      case 'O':
        pent = new char[][][] { {{'*'}, {'*'}, {'*'}, {'*'}, {'*'}},
                                {{'*','*','*','*','*'}} };
        type = 'O';
        check = 0;
        break;
      case 'P':
        pent = new char[][][] { {{'*','*'}, {'*','*'}, {'*','.'}},
                                {{'*','*'}, {'*','*'}, {'.','*'}},
                                {{'.','*'}, {'*','*'}, {'*','*'}},
                                {{'*','.'}, {'*','*'}, {'*','*'}},
                                {{'*','*','*'}, {'.','*','*'}},
                                {{'*','*','*'}, {'*','*','.'}},
                                {{'.','*','*'}, {'*','*','*'}},
                                {{'*','*','.'}, {'*','*','*'}} };
        type = 'P';
        check = 0;
        break;
      case 'Q':
        pent = new char[][][] { {{'*','*'}, {'.','*'}, {'.','*'}, {'.','*'}},
                                {{'*','*'}, {'*','.'}, {'*','.'}, {'*','.'}},
                                {{'.','*'}, {'.','*'}, {'.','*'}, {'*','*'}},
                                {{'*','.'}, {'*','.'}, {'*','.'}, {'*','*'}},
                                {{'*','*','*','*'}, {'.','.','.','*'}},
                                {{'*','*','*','*'}, {'*','.','.','.'}},
                                {{'*','.','.','.'}, {'*','*','*','*'}},
                                {{'.','.','.','*'}, {'*','*','*','*'}} };
        type = 'Q';
        check = 0;
        break;
      case 'R':
        pent = new char[][][] { {{'.','*','*'}, {'*','*','.'}, {'.','*','.'}},
                                {{'*','*','.'}, {'.','*','*'}, {'.','*','.'}},
                                {{'.','*','.'}, {'*','*','*'}, {'.','.','*'}},
                                {{'.','*','.'}, {'*','*','*'}, {'*','.','.'}},
                                {{'.','*','.'}, {'.','*','*'}, {'*','*','.'}},
                                {{'.','*','.'}, {'*','*','.'}, {'.','*','*'}},
                                {{'.','.','*'}, {'*','*','*'}, {'.','*','.'}},
                                {{'*','.','.'}, {'*','*','*'}, {'.','*','.'}} };
        type = 'R';
        check = 0;
        break;
      case 'S':
        pent = new char[][][] { {{'.','.','*','*'}, {'*','*','*','.'}},
                                {{'*','*','.','.'}, {'.','*','*','*'}},
                                {{'.','*','*','*'}, {'*','*','.','.'}},
                                {{'*','*','*','.'}, {'.','.','*','*'}},
                                {{'*','.'}, {'*','*'}, {'.','*'}, {'.','*'}},
                                {{'.','*'}, {'*','*'}, {'*','.'}, {'*','.'}},
                                {{'*','.'}, {'*','.'}, {'*','*'}, {'.','*'}},
                                {{'.','*'}, {'.','*'}, {'*','*'}, {'*','.'}} };
        type = 'S';
        check = 0;
        break;
      case 'T':
        pent = new char[][][] { {{'*','*','*'}, {'.','*','.'}, {'.','*','.'}},
                                {{'.','.','*'}, {'*','*','*'}, {'.','.','*'}},
                                {{'.','*','.'}, {'.','*','.'}, {'*','*','*'}},
                                {{'*','.','.'}, {'*','*','*'}, {'*','.','.'}} };
        type = 'T';
        check = 0;
        break;
      case 'U':
        pent = new char[][][] { {{'*','.','*'}, {'*','*','*'}},
                                {{'*','*'}, {'*','.'}, {'*','*'}},
                                {{'*','*','*'}, {'*','.','*'}},
                                {{'*','*'}, {'.','*'}, {'*','*'}} };
        type = 'U';
        check = 0;
        break;
      case 'V':
        pent = new char[][][] { {{'*','.','.'}, {'*','.','.'}, {'*','*','*'}},
                                {{'*','*','*'}, {'*','.','.'}, {'*','.','.'}},
                                {{'*','*','*'}, {'.','.','*'}, {'.','.','*'}},
                                {{'.','.','*'}, {'.','.','*'}, {'*','*','*'}} };
        type = 'V';
        check = 0;
        break;
      case 'W':
        pent = new char[][][] { {{'*','.','.'}, {'*','*','.'}, {'.','*','*'}},
                                {{'.','*','*'}, {'*','*','.'}, {'*','.','.'}},
                                {{'*','*','.'}, {'.','*','*'}, {'.','.','*'}},
                                {{'.','.','*'}, {'.','*','*'}, {'*','*','.'}} };
        type = 'W';
        check = 0;
        break;
      case 'X':
        pent = new char[][][] { {{'.','*','.'}, {'*','*','*'}, {'.','*','.'}} };
        type = 'X';
        check = 0;
        break;
      case 'Y':
        pent = new char[][][] { {{'.','*'}, {'*','*'}, {'.','*'}, {'.','*'}},
                                {{'.','.','*','.'}, {'*','*','*','*'}},
                                {{'*','.'}, {'*','.'}, {'*','*'}, {'*', '.'}},
                                {{'*','*','*','*'}, {'.','*','.','.'}},
                                {{'*','.'}, {'*','*'}, {'*','.'}, {'*', '.'}},
                                {{'*','*','*','*'}, {'.','.','*','.'}},
                                {{'.','*'}, {'.','*'}, {'*','*'}, {'.','*'}},
                                {{'.','*','.','.'}, {'*','*','*','*'}} };
        type = 'Y';
        check = 0;
        break;
      case 'Z':
        pent = new char[][][] { {{'*','*','.'}, {'.','*','.'}, {'.','*','*'}},
                                {{'.','.','*'}, {'*','*','*'}, {'*','.','.'}},
                                {{'.','*','*'}, {'.','*','.'}, {'*','*','.'}},
                                {{'*','.','.'}, {'*','*','*'}, {'.','.','*'}} };
        type = 'Z';
        check = 0;
        break;
    }
  }
}
